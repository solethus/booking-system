// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteBooking = `-- name: DeleteBooking :exec
DELETE FROM booking WHERE id = $1
`

func (q *Queries) DeleteBooking(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteBooking, id)
	return err
}

const insertBooking = `-- name: InsertBooking :one
INSERT INTO booking(start_time, end_time, email)
VALUES ($1, $2, $3)
RETURNING id, start_time, end_time, email, create_at
`

type InsertBookingParams struct {
	StartTime pgtype.Timestamp
	EndTime   pgtype.Timestamp
	Email     string
}

func (q *Queries) InsertBooking(ctx context.Context, arg InsertBookingParams) (Booking, error) {
	row := q.db.QueryRow(ctx, insertBooking, arg.StartTime, arg.EndTime, arg.Email)
	var i Booking
	err := row.Scan(
		&i.ID,
		&i.StartTime,
		&i.EndTime,
		&i.Email,
		&i.CreateAt,
	)
	return i, err
}

const listBookingBetween = `-- name: ListBookingBetween :many
SELECT id, start_time, end_time, email, create_at FROM booking
WHERE start_time >= $1 AND end_time <= $2
`

type ListBookingBetweenParams struct {
	StartTime pgtype.Timestamp
	EndTime   pgtype.Timestamp
}

func (q *Queries) ListBookingBetween(ctx context.Context, arg ListBookingBetweenParams) ([]Booking, error) {
	rows, err := q.db.Query(ctx, listBookingBetween, arg.StartTime, arg.EndTime)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Booking
	for rows.Next() {
		var i Booking
		if err := rows.Scan(
			&i.ID,
			&i.StartTime,
			&i.EndTime,
			&i.Email,
			&i.CreateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBookings = `-- name: ListBookings :many
SELECT id, start_time, end_time, email, create_at FROM booking
`

func (q *Queries) ListBookings(ctx context.Context) ([]Booking, error) {
	rows, err := q.db.Query(ctx, listBookings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Booking
	for rows.Next() {
		var i Booking
		if err := rows.Scan(
			&i.ID,
			&i.StartTime,
			&i.EndTime,
			&i.Email,
			&i.CreateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
